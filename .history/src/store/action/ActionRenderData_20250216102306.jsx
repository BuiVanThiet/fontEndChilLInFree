import { Input, Button, Space } from 'antd';
import { SearchOutlined } from '@ant-design/icons';

export const getColumnSearchProps = (dataIndex, searchText, searchedColumn, handleSearch, handleReset) => ({
    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
        <div style={{ padding: 8 }} onKeyDown={(e) => e.stopPropagation()}>
            <Input
                placeholder="T√¨m ki·∫øm"
                value={selectedKeys[0]}
                onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
                onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
                style={{ marginBottom: 8, display: 'block' }}
            />
            <Space>
                <Button
                    type="primary"
                    onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}
                    icon={<SearchOutlined />}
                    size="small"
                    style={{ width: 90 }}
                >
                    T√¨m ki·∫øm
                </Button>
                <Button
                    onClick={() => clearFilters && handleReset(clearFilters)}
                    size="small"
                    style={{ width: 90 }}
                >
                    L√†m m·ªõi
                </Button>
            </Space>
        </div>
    ),
    filterIcon: (filtered) => <SearchOutlined style={{ color: filtered ? '#1677ff' : undefined }} />,
    onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),
    render: (text) => (searchedColumn === dataIndex ? (
        <span
            style={{
                // backgroundColor: '#ffc069',
                padding: 0,
            }}
        >
            {text}
        </span>
    ) : text),
});


export const convertData = (dataArray) => {
    return dataArray.map((item, index) => {
        return item.reduce((acc, value, i) => {
            acc[`object${i + 1}`] = value; // object1, object2, ...
            return acc;
        }, { key: index }); // Th√™m key duy nh·∫•t cho React
    });
};

export const convertDataFillter = (dataArray) => {
    return dataArray.map((item) => ({
        text: item[2], // Ph·∫ßn t·ª≠ th·ª© 3 trong m·∫£ng
        value: item[0] // Ph·∫ßn t·ª≠ th·ª© 3 trong m·∫£ng
    }));
};

export const convertDataSelected = (dataArray) => {
    return dataArray.map((item) => ({
        label: item[2], // Ph·∫ßn t·ª≠ th·ª© 3 trong m·∫£ng
        value: item[0],
        code: item[1], // Ph·∫ßn t·ª≠ th·ª© 3 trong m·∫£ng
        data: item,
    }));
};

export const formatNumberWithCommas = (number) => {
    // Chuy·ªÉn input th√†nh chu·ªói n·∫øu ch∆∞a ph·∫£i
    let str = number.toString();

    // Lo·∫°i b·ªè t·∫•t c·∫£ d·∫•u ',' c≈© (n·∫øu c√≥)
    str = str.replace(/,/g, "");

    // Th√™m d·∫•u ',' c·ª© m·ªói 3 s·ªë t·ª´ ph·∫£i sang tr√°i
    return str.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

export const formatNumberWithCommasText = (number) => {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

//validate 
//ph·∫£i l√† s·ªë nguy√™n v√† l·ªõn h∆°n 0
export const validateInteger = (value) => {
    if (isNaN(value) || value === null || value === "" || typeof value === "boolean") {
        return "ph·∫£i l√† s·ªë!"; // ‚ùå Kh√¥ng ph·∫£i s·ªë
    }

    const numberValue = Number(value);

    if (!Number.isFinite(numberValue)) {
        return "ph·∫£i l√† s·ªë"; // ‚ùå Kh√¥ng h·ª£p l·ªá (Infinity, NaN)
    }

    if (!Number.isInteger(numberValue)) {
        return "ph·∫£i l√† s·ªë nguy√™n!"; // ‚ùå L√† s·ªë th·ª±c (c√≥ ph·∫ßn d∆∞)
    }

    if (numberValue < 0) {
        return "ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0!"; // ‚ùå S·ªë √¢m
    }

    if (numberValue > 100000000000) {
        return "ph·∫£i b√© h∆°n 100 t·ª∑!";
    }

    return true; // ‚úÖ H·ª£p l·ªá
};

// Ki·ªÉm tra chu·ªói nh·∫≠p
export const validateString = (value) => {
    if (typeof value !== "string" || value.trim() === "") {
        return "ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª±!"; // ‚ùå R·ªóng ho·∫∑c kh√¥ng ph·∫£i chu·ªói
    }

    if (value.length > 255) {
        return "kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±!"; // ‚ùå Qu√° d√†i
    }

    return true; // ‚úÖ H·ª£p l·ªá
};

// Ki·ªÉm tra tr√πng l·∫∑p
export const checkDuplicate = (value, arr, action, nameColumn, valueDelete) => {
    if (!Array.isArray(arr)) {
        return "Danh s√°ch ki·ªÉm tra ph·∫£i l√† m·ªôt m·∫£ng"; // ‚ùå N·∫øu arr kh√¥ng ph·∫£i m·∫£ng
    }

    if (action === 1) { // üîπ TH√äM: Ki·ªÉm tra tr√πng
        return arr.some(item => item.object2 === value) ? "ƒë√£ t·ªìn t·∫°i" : true;
    }

    if (action === 2) { // üîπ S·ª¨A: X√≥a ph·∫ßn t·ª≠ theo c·ªôt v√† gi√° tr·ªã
        const index = arr.findIndex(item => item[nameColumn] === valueDelete);
        if (index !== -1) {
            arr.splice(index, 1); // X√≥a ph·∫ßn t·ª≠ t·∫°i index t√¨m th·∫•y
            return arr.some(item => item.object2 === value) ? "Gi√° tr·ªã ƒë√£ t·ªìn t·∫°i" : true;
        }
    }
};



